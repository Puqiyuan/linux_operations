no password need:
git config --global credential.helper 'cache --timeout 7200'
more times should can
git push /your/repo/addr/

1。把当前最新版与758905f版做个比较，生成一个patch。

git diff 758905f5411840c269b6a2e48d7fdcf1240dc541 thesis.tex > tmp.patch

2。checkout 758905f 版的 thesis.tex 文件

git co -f 758905f5411840c269b6a2e48d7fdcf1240dc541 thesis.tex

3。打补丁

git apply  758905f.patch

4。打你的tmp.patch补丁

git apply tmp.patch

To initialize a Git repository:
git init

the current state:
git status

wildcard:
git add '*.txt'

log:
git log

add a remote repo:
git remote add origin https://github.com/try-git/try_git.git

check for changes on our GitHub repository and pull down any new changes by running:
git pull origin master

the diff of our most recent commit, which we can refer to using the HEAD pointer.
git diff HEAD

run git diff with the --staged option to see the changes you just staged
git diff --staged

unstage files by using the git reset command. 
git reset octofamily/octodog.txt

Files can be changed back to how they were at the last commit by using the command: 
git checkout -- octocat.txt

When developers are working on a feature or bug they'll 
often create a copy (aka. branch) of their code they can make separate commits to. 
Then when they're done they can merge this branch back into their main master branch:
create a branch:
git branch clean_up

switch branches using the git checkout <branch> command:
git checkout clean_up

by using the git rm command which will not only remove the actual files from disk, 
but will also stage the removal of the files for us:
git rm '*.txt'

switch back:
git checkout master

tell Git to merge the clean_up branch:
git merge clean_up

use git branch -d <branch name> to delete a branch:
git branch -d clean_up

no warn git apply:
git apply --whitespace=nowarn patchname.patch


应用一个补丁：
git branch -d tmp

git branch tmp

git checkout tmp

git checkout -f $point

git apply --ignore-whitespace $Basename

git add .

git ci . -m "apply $matcher patch file"

git checkout master

git merge tmp

git branch -d tmp

git add .

git ci . -m "apply $matcher patch file"

git push
有时候应用一个补丁并不那么顺利，比如在merge的时候遇到了confilt,
这时需要手动选择=上的内容还是=下的内容，还是你自己添加的内容，并且
有时候出现这样的信息：
Warning: you are leaving 1 commit behind, not connected to
any of your branches:

  51f79d2 apply patch

If you want to keep it by creating a new branch, this may be a good time
to do so with:

 git branch <new-branch-name> 51f79d2

Switched to branch 'tmp'
就需要按提示在此创建分支，而把新创建的这个分支merge到你的master中。
